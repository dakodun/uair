__	Class List
	uair::Polygon
--
	inc/uair/polygon.hpp
	src/polygon.cpp
--
	Polygon
--
	A collection of points that form a polygon.
--
	A collection of points that form a polygon, used for such things as bounding boxes and collision masks.
__

+	public
	std::vector<glm::vec2> GetPoints() const
=	Returns a copy of the std::vector that holds the relative points that make up the polygon, excluding the first
	(which is the position).
<	A std::vector of relative points that constitute the polygon.

+	public
	std::vector<glm::vec2> GetAbsolutePoints() const
=	Returns a std::vector that holds the absolute points that make up the polygon, excluding the first
	(which is the position).
==	Returns a std::vector that holds the absolute points that make up the polygon, excluding the first
	(which is the position). To convert a relative point to an absolute point the position is added to it.
<	A std::vector of absolute points that constitute the polygon.

+	public
	void AddPoint(const glm::vec2 & point)
=	Adds a relative point to the polygon and updates the bounds.
>	const glm::vec2 & point: the relative point to add to the polygon.

+	public
	void AddPoints(const std::vector<glm::vec2> & points)
=	Adds a group of relative points to the polygon and updates the bounds.
>	const std::vector<glm::vec2> & points: the std::vector of relative points to add to the polygon.

+	public
	void AddAbsolutePoint(const glm::vec2 & point)
=	Adds an absolute point to the polygon and updates the bounds.
==	Adds an absolute point to the polygon and updates the bounds. To do so, it
	first converts the absolute point to a relative point (by subtracting the position from it) and
	then calls the relative add point function: [link:AddPoint|__polygon.html#anchAddPoint].
>	const glm::vec2 & point: the absolute point to add to the polygon.

+	public
	void AddAbsolutePoints(const std::vector<glm::vec2> & points)
=	Adds a group of absolute points to the polygon and updates the bounds.
==	Adds a group of absolute points to the polygon and updates the local and global bounding boxes if neccesary. To do so, it
	first converts the absoulte points to relative points (by subtracting the position from them) and
	then calls the relative add points function: [link:AddPoints|__polygon.html#anchAddPoints].
>	const std::vector<glm::vec2> & points: the std::vector of absolute points to add to the polygon.

+	public
	void Clear()
=	Clears the polygon by removing all points and resetting the bounds.


+	public
	glm::vec2 GetPosition() const
=	Returns a copy of polygon's position.
<	A copy of glm::vec2 representing the position of the polygon.

+	public
	void SetPosition(const glm::vec2 & newPos)
=	Sets the position of the polygon.
>	const glm::vec2 & newPos: the new position of the polygon.


+	public
	void MakeRectangle(const glm::vec2 & position, const glm::vec2 & size)
=	Sets the polygon to a rectangle with the specified dimensions.
==	Sets the polygon to a rectangle with the specified dimensions by first removing any existing points and resetting
	bounds, then adding the points that constitute the rectangle.
>	const glm::vec2 & position: the position of the rectangle (and first point).
>	const glm::vec2 & size: the width and height of the rectangle.

+	public
	void MakeCircle(const glm::vec2 & position, const float & radius, const unsigned int & numPoints)
=	Sets the polygon to a circle with the specified dimensions.
==	Sets the polygon to a circle with the specified dimensions by first removing any existing points and resetting
	bounds, then adding the points that constitute the circle.
>	const glm::vec2 & position: the position of the circle (and first point).
>	const float & radius: the radius of the circle (the distance between the position and the centre).
>	const unsigned int & numPoints: the number of points that form the circle; a higher number makes a smoother
	looking circle.


+	public
	std::vector<glm::vec2> GetBounds() const
=	Returns a copy of the polygon's bounds (top-left and bottom-right)
<	A copy of the std::vector holding the polygon's bounds.

+	public
	void Transform(const glm::mat3 & transform)
=	Transforms the polygon's points by the supplied transformation matrix.
>	const glm::mat3 & transform: the transformation matrix (3x3) to apply to each of the
	polygon's points.


-	private
	std::vector<glm::vec2> mPoints
=	The relative points that form the polygon.

-	private
	std::vector<glm::vec2> mBounds
=	The current bounds of the polygon (top-left and bottom-right extremes).
>	Two glm::vec2 with x and y values of 0.0f.

-	private
	glm::vec2 mPosition
=	The position of the polygon (also acts as its first point).

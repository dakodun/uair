__	Class List
	uair::Shape
--
	inc/uair/shape.hpp
	src/shape.cpp
--
	Shape
--
	A renderable shape made up of points.
--
	Inherits from [link:Renderable|__renderable.html].
	
	
	A renderable shape made up of points that inherits from the [link:Renderable|__renderable.html] base class
	so that it can be used via a [link:Render Batch|__renderbatch.html] to draw it to the screen.
__

+	public
	std::string GetTag() const
=	Returns the tag (type) associated with this [link:Renderable|__renderable.html] to identify it when accessed
	via a base class pointer.
<	A std::string representing the type of the renderable ("Shape").


+	public
	std::vector<glm::vec2> GetPoints() const
=	Returns a copy of the std::vector that holds the relative points that make up the shape, excluding the first
	(which is the position).
<	A std::vector of relative points that constitute the shape.

+	public
	std::vector<glm::vec2> GetAbsolutePoints() const
=	Returns a std::vector that holds the absolute points that make up the shape, excluding the first
	(which is the position).
==	Returns a std::vector that holds the absolute points that make up the shape, excluding the first
	(which is the position). To convert a relative point to an absolute point the position is added to it.
<	A std::vector of absolute points that constitute the shape.

+	public
	void AddPoint(const glm::vec2 & point)
=	Adds a relative point to the shape and updates the local and global bounding boxes if neccesary.
>	const glm::vec2 & point: the relative point to add to the shape.

+	public
	void AddPoints(const std::vector<glm::vec2> & points)
=	Adds a group of relative points to the shape and updates the local and global bounding boxes if neccesary.
>	const std::vector<glm::vec2> & points: the std::vector of relative points to add to the shape.

+	public
	void AddAbsolutePoint(const glm::vec2 & point)
=	Adds an absolute point to the shape and updates the local and global bounding boxes if neccesary.
==	Adds an absolute point to the shape and updates the local and global bounding boxes if neccesary. To do so, it
	first converts the absolute point to a relative point (by subtracting the position from it) and
	then calls the relative add point function: [link:AddPoint|__shape.html#anchAddPoint].
>	const glm::vec2 & point: the absolute point to add to the shape.

+	public
	void AddAbsolutePoints(const std::vector<glm::vec2> & points)
=	Adds a group of absolute points to the shape and updates the local and global bounding boxes if neccesary.
==	Adds a group of absolute points to the shape and updates the local and global bounding boxes if neccesary. To do so, it
	first converts the absoulte points to relative points (by subtracting the position from them) and
	then calls the relative add points function: [link:AddPoints|__shape.html#anchAddPoints].
>	const std::vector<glm::vec2> & points: the std::vector of absolute points to add to the shape.

+	public
	void Clear()
=	Clears the shape by removing all points and resetting the bounds and bounding boxes (local and global).


+	public
	void MakeRectangle(const glm::vec2 & position, const glm::vec2 & size)
=	Sets the shape to a rectangle with the specified dimensions.
==	Sets the shape to a rectangle with the specified dimensions by first removing any existing points and resetting
	bounds and bounding boxes, then adding the points that constitute the rectangle.
>	const glm::vec2 & position: the position of the rectangle (and first point).
>	const glm::vec2 & size: the width and height of the rectangle.

+	public
	void MakeCircle(const glm::vec2 & position, const float & radius, const unsigned int & numPoints)
=	Sets the shape to a circle with the specified dimensions.
==	Sets the shape to a circle with the specified dimensions by first removing any existing points and resetting
	bounds and bounding boxes, then adding the points that constitute the circle.
>	const glm::vec2 & position: the position of the circle (and first point).
>	const float & radius: the radius of the circle (the distance between the position and the centre).
>	const unsigned int & numPoints: the number of points that form the circle; a higher number makes a smoother
	looking circle.


+	protected
	void UpdateGlobalBoundingBox()
=	Updates the global bounding box to fully encapsulate the transformed shape.
==	Updates the global bounding box to fully encapsulate the transformed shape by creating a copy of the shape
	and finding the bounds, using those to create a bounding box.

+	protected
	void UpdateGlobalMask()
=	Updates the global mask to match the shape's current transformation.
==	Updates the global mask to match the shape's current transformation by creating a copy of the local mask
	and transforming it.

+	protected
	void CreateLocalMask()
=	Creates a default local mask for the shape.
==	Creates a default local mask for the shape which is essentially just a copy of the shape (points and position).

+	protected
	RenderBatchData Upload() const
=	Prepares the shape for a [link:RenderBatch|__renderbatch.html] by converting its data to
	[link:VBOVertices|__vbovertex.html], and creating VBOIndices.
<	A [link:RenderBatchData|__renderbatchdata.html] object holding the vertices, indices, texture id and tag of the shape.


-	private
	std::vector<glm::vec2> mPoints
=	The relative points that form the shape.

-	private
	std::vector<glm::vec2> mBounds
=	The current bounds of the shape (top-left and bottom-right extremes).
>	Two glm::vec2 with x and y values of 0.0f.

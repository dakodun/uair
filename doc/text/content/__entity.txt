__	Class List
	Entity
--
	inc/uair/entity.hpp
	src/entity.cpp
--
	class Entity
--
	Brief
--
	Detailed
__

+	public
	Entity(const unsigned int& entityID, const std::string& entityName = "")
=	Brief
==	Detailed
>	const unsigned int& entityID: 
>	const std::string& entityName: 

+	public
	Entity(const Entity& other) = delete
=	Brief
==	Detailed
>	const Entity& other: 

+	public
	Entity(Entity&& other)
=	Brief
==	Detailed
>	Entity&& other: 

+	public
	Entity& operator=(Entity other)
=	Brief
==	Detailed
>	Entity other: 
<	Return

+	public
	friend void swap(Entity& first, Entity& second)
=	Brief
==	Detailed
>	Entity& first: 
>	Entity& second: 

+	public
	template <typename T>
	void RegisterComponent()
=	Brief
==	Detailed

+	public
	template <typename T>
	bool IsComponentRegistered()
=	Brief
==	Detailed
<	Return

+	public
	template <typename T, typename ...Ps>
	Manager<Component>::Handle AddComponent(const std::string& name, const Ps&... params)
=	Brief
==	Detailed
>	const std::string& name: 
>	const Ps&... params: 
<	Return

+	public
	template <typename T>
	void RemoveComponent(const Manager<Component>::Handle& handle)
=	Brief
==	Detailed
>	const Manager<Component>::Handle& handle: 

+	public
	template <typename T>
	void RemoveComponents(const std::string& name)
=	Brief
==	Detailed
>	const std::string& name: 

+	public
	template <typename T>
	void RemoveComponents()
=	Brief
==	Detailed

+	public
	void RemoveComponent(const Manager<Component>::Handle& handle)
=	Brief
==	Detailed
>	const Manager<Component>::Handle& handle: 

+	public
	void RemoveComponents(const std::string& name)
=	Brief
==	Detailed
>	const std::string& name: 

+	public
	void RemoveComponents()
=	Brief
==	Detailed

+	public
	template <typename T>
	T& GetComponent(const Manager<Component>::Handle& handle)
=	Brief
==	Detailed
>	const Manager<Component>::Handle& handle: 
<	Return

+	public
	template <typename T>
	std::list< std::reference_wrapper<T> > GetComponents(const std::string& name)
=	Brief
==	Detailed
>	const std::string& name: 
<	Return

+	public
	template <typename T>
	std::list< std::reference_wrapper<T> > GetComponents()
=	Brief
==	Detailed
<	Return

+	public
	template <typename T>
	std::list<Manager<Component>::Handle> GetComponentHandles(const std::string& name)
=	Brief
==	Detailed
>	const std::string& name: 
<	Return

+	public
	template <typename T>
	std::list<Manager<Component>::Handle> GetComponentHandles()
=	Brief
==	Detailed
<	Return

+	public
	std::list<Manager<Component>::Handle> GetComponentHandles(const std::string& name)
=	Brief
==	Detailed
>	const std::string& name: 
<	Return

+	public
	std::list<Manager<Component>::Handle> GetComponentHandles()
=	Brief
==	Detailed
<	Return

+	public
	unsigned int GetEntityID() const
=	Brief
==	Detailed
<	Return

+	public
	std::string GetName() const
=	Brief
==	Detailed
<	Return


-	private
	Manager<Component> mComponentManager
=	Brief
==	Detailed

-	private
	unsigned int mEntityID
=	Brief
==	Detailed
>	Default

-	private
	std::string mName
=	Brief
==	Detailed
>	Default

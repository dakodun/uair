__	Class List
	Triangulate
--
	inc/uair/triangulate.hpp
	src/triangulate.cpp
--
	class Triangulate
--
	Brief
--
	Detailed
__

+	public
	Triangulate()
=	Brief
==	Detailed

+	public
	Triangulate(const Triangulate& other)
=	Brief
==	Detailed
>	const Triangulate& other: 

+	public
	Triangulate(Triangulate&& other)
=	Brief
==	Detailed
>	Triangulate&& other: 

+	public
	~Triangulate()
=	Brief
==	Detailed

+	public
	Triangulate& operator=(Triangulate other)
=	Brief
==	Detailed
>	Triangulate other: 
<	Return

+	public
	friend void swap(Triangulate& first, Triangulate& second)
=	Brief
==	Detailed
>	Triangulate& first: 
>	Triangulate& second: 

+	public
	Result Process(const WindingRule& windingRule = WindingRule::Odd)
=	Brief
==	Detailed
>	const WindingRule& windingRule: 
<	Return

+	public
	void AddContour(const std::vector<glm::vec2>& contour)
=	Brief
==	Detailed
>	const std::vector<glm::vec2>& contour: 

+	public
	void AddContours(const std::vector< std::vector<glm::vec2> >& contours)
=	Brief
==	Detailed
>	const std::vector< std::vector<glm::vec2> >& contours: 

+	public
	void Clear()
=	Brief
==	Detailed


+	protected
	static CALLBACK void HandleBegin(GLenum which)
=	Brief
==	Detailed
>	GLenum which: 

+	protected
	static CALLBACK void HandleEnd()
=	Brief
==	Detailed

+	protected
	static CALLBACK void HandleVertexData(void *vertex_data, void *polygon_data)
=	Brief
==	Detailed
>	void *vertex_data: 
>	void *polygon_data: 

+	protected
	static CALLBACK void HandleCombineData(GLdouble coords[3], void *vertex_data[4], GLfloat weight[4], void **outData, void *polygon_data)
=	Brief
==	Detailed
>	GLdouble coords[3]: 
>	void *vertex_data[4]: 
>	GLfloat weight[4]: 
>	void **outData: 
>	void *polygon_data: 

+	protected
	static CALLBACK void HandleErrorData(GLenum errno, void *polygon_data)
=	Brief
==	Detailed
>	GLenum errno: 
>	void *polygon_data: 

+	protected
	static CALLBACK void HandleEdgeFlag(GLboolean flag)
=	Brief
==	Detailed
>	GLboolean flag: 


+	private
	void FreeNewVertices()
=	Brief
==	Detailed


-	private
	GLUtesselator* mTesselator
=	Brief
==	Detailed

-	private
	std::vector< std::vector<VertexData> > mContours
=	Brief
==	Detailed

-	private
	unsigned int mVertexCount
=	Brief
==	Detailed
>	Default

-	private
	std::vector<Vertex> mVertices
=	Brief
==	Detailed

-	private
	std::vector<unsigned int> mIndices
=	Brief
==	Detailed

-	private
	std::vector<VertexData*> mNewVertices
=	Brief
==	Detailed


~	public
	class Vertex
=	Description
<	Link

~	public
	typedef std::pair< std::vector<Vertex>, std::vector<unsigned int> > Result
=	Description
<	Link


~	private
	class VertexData
=	Description
<	Link

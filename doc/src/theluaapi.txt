--tThe LuaAPI
--sIntro to the LuaAPI
--pDeclare and initialise a uair::LuaAPI object. A LuaAPI object can be --/
default constructed or move constructed (assigned and swapped) but not --/
copy constructed.

--cSetting up a LuaAPI Instance
uair::LuaAPI luaAPI;
---

--puair::LuaAPI takes the whitelist approach meaning that nothing is --/
available in the environment by default. In order to be of any use, --/
required functions (including both lua functions and user registered --/
custom functions) must be first added to the whitelist and then a new --/
sandbox environment must be created (using the new whitelist).

--cSetting up the sandbox
luaAPI.AddWhitelist("print");
luaAPI.CreateSandbox();
---

--pLua scripts are passed to a uair::LuaAPI instance via a std::string --/
through the CallString functions. There are overloads to pass a variable --/
number of parameters to the script and to recieve multiple return --/
values. There is also a version that forgoes automatic stack management.

--cCalling a script
try {
  // create the string that contains our lua script
  std::string script = R"(
    print("Knock knock.")
  )";

  // call the script with automatic stack management
  // (no paramaters or return values
  luaAPI.CallString(scr);
} catch (std::exception& e) {
  std::cout << e.what() << std::endl;
}
---

--sCalling Scripts
--pParameters are passed to the script through the CallString function --/
with automatic type deduction. Multiple return values are returned as a --/
tuple and the return type must be specified as a template parameter (a --/
single return value is returned as an object of that type).

--cMultiple parameters and return values
try {
  std::string scr = R"(
    local i, j = ...
    local k = i + j

    local s = ""
    if k < 0 then
      s = ": in the red..."
    else
      s = ": in the black!"
    end

    return k, s
  )";

  auto r = luaAPI.CallString<int, std::string>(scr, 3, -5);
  std::cout << std::get<0>(r) << std::get<1>(r) << std::endl;
} catch (std::exception& e) {
  std::cout << e.what() << std::endl;
}
---

--pThe CallString function requires to stack to be empty in order to --/
properly perform stack management. If you wish to maintain the stack --/
yourself you can instead call the unmanaged function (CallStringU), --/
adding the parameters to the stack beforehand, indicating the number of --/
parameters and then reading the return values from the stack afterwards.

--sStack Manipulation
--pWhilst it is never necessary to interact with the stack directly --/
there exists a number of functions to make it easier to both inspect and --/
modify the contents of the stack.

--cMultiple parameters and return values
try {
  // stack size should be 0 initially
  std::cout << "Stack: " << luaAPI.GetStackSize() << std::endl;
  
  // add various values to the stack
  luaAPI.PushStack(1);
  luaAPI.PushStack("Hello");
  luaAPI.PushStack(2, "World", 3, 5.5f);

  // stack size should now be 6
  std::cout << "Stack: " << luaAPI.GetStackSize() << std::endl;

  // return the value on top of the stack (doesn't remove it)
  float f = luaAPI.ReadStack<float>(luaAPI.GetStackSize());
  std::cout << f << std::endl;

  // stack size is still 6
  std::cout << "Stack: " << luaAPI.GetStackSize() << std::endl;

  // remove values from the stack
  luaAPI.PopStack(2);
  luaAPI.RemoveStack(luaAPI.GetStackSize() - 1);

  // stack size is now 3
  std::cout << "Stack: " << luaAPI.GetStackSize() << std::endl;
  
  // read the top 2 values off the stack
  auto values = luaAPI.ReadStack<std::string,
      std::string>(luaAPI.GetStackSize() - 1);
  std::cout << std::get<0>(values) << " " <<
      std::get<1>(values) << std::endl;

  // set the size of the stack to 0 essentially clearing it
  luaAPI.SetStackSize(0);
  std::cout << "Stack: " << luaAPI.GetStackSize() << std::endl;
} catch (std::exception& e) {
  std::cout << e.what() << std::endl;
}
---

--sRegistering Types
--pAll fundamental types are represented (including a custom LuaAPI::Nil --/
type) through overloaded functions. Custom types are supported by --/
first registering the type and then the functions of that type you wish --/
to use, exposing them to Lua.

--cRegistering a Custom Type
class CType {
	public :
    void Output() {
      std::cout << "CType: " << mI << std::endl;
    }
	
	public :
		int mI = 0;
};

luaAPI.RegisterType<CType>("uair.ctype");
luaAPI.RegisterConstructor<CType>();
luaAPI.RegisterFunction<CType, void>("output", &CType::Output);
luaAPI.RegisterGetter<CType, int>("geti", &CType::mI);
luaAPI.RegisterSetter<CType, int>("seti", &CType::mI);
---

--pAfter registering our custom type and whitelisting it to be available --/
in Lua ("uair.ctype") our type can now be passed to Lua, created --/
and manipulated in Lua, and passed back from Lua to our program.

--cUsing a Custom Type
try {
  CType c; c.mI = 4;

  std::string scr = R"(
    local c = ...
    c:seti(6)
    c:output()

    local c2 = uair.ctype()
    c2:seti(3)
    return c2
  )";

  CType c2 = luaAPI.CallString<CType>(scr, c);
  c2.Output();
} catch (std::exception& e) {
  std::cout << e.what() << std::endl;
}
---

--pIf the custom type that you're registering doesn't allow default --/
construction or has some other special restriction then it might be --/
necessary to manually define the PushStack and ReadStack overloads to --/
properly handle your type.

--cCustom Push/Read for non-default Special Type
class SType {
	public :
    // no default constructor available
		SType(const int& i) : mI(i) {
			
		}

    void Output() {
      std::cout << "SType: " << mI << std::endl;
    }
	
	public :
		int mI = 0;
};

template <>
void LuaAPI::PushStack<SType>(SType value) {
  typedef UserDataWrapper<SType> WrappedType;
  
  void* userdata = lua_newuserdata(mState,
      sizeof(WrappedType*));
  WrappedType** data = static_cast<WrappedType**>(userdata);
  *data = new WrappedType();
  
  (*data)->mUserData = new SType(0);
  *((*data)->mUserData) = value;
  (*data)->mShouldDelete = true;
  
  lua_setmetatable(mState, -2);
}

template <>
SType LuaAPI::ReadStack(const int& index) {
  typedef UserDataWrapper<SType> WrappedType;
  
  SType result(0);
  WrappedType** data = static_cast<WrappedType**>(userdata);
  result = *((*data)->mUserData);
  return result;
}
---

--sRegistering Static Functions
--pIt is also possible to register static functions with the LuaAPI --/
which allows you to call a function within a script that affects your --/
program without needing to pass objects to and from Lua.

--cUsing Static Functions
extern int Outputi(const int& i, const float& f) {
	std::cout << "Success: " << i << " + " <<
      f << "!" << std::endl;
	return 0;
}

luaApi.RegisterStaticFunction<int, const int&,
    const float&>("uair.tmpStcFncif", &Outputi);

try {
  std::string scr = R"(
    uair.tmpStcFncif(1, 2.4)
  )";

  luaApi.CallString(scr);
} catch (std::exception& e) {
  std::cout << e.what() << std::endl;
}
---

--sAdditional Information
--pIt is also possible to pass (non-fundamental) objects to Lua via --/
reference and thus modify them directly via Lua.

--cPass by reference
try {
  CType c; c.mI = 4;

  std::string scr = R"(
    local c = ...
    c:seti(6)
  )";

  luaAPI.CallString(scr, &c);
  c.Output();
} catch (std::exception& e) {
  std::cout << e.what() << std::endl;
}
---
